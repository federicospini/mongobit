
var fs = require('fs');
var WebSocket = require('ws');
var async = require('async');


var drawer = require('./drawer.js');

// Load the certificate for the TLS connection which is automatically
// generated by btcd when it starts the RPC server and doesn't already
// have one.
// var cert = fs.readFileSync('./rpc.cert');
// var user = "fe";
// var password = "Ih0p3th1s1s4d3cntp4ssw0rd";
// var address = 'wss://ONE:8334/ws';

var cert = fs.readFileSync('./rpc-cvd01.cert');
var user = "bitcoiner";
var password = "VeryStr0ngP4ssw0rd";
var address = 'wss://localhost:8334/ws'; // da remoto su cvd0101 o su proprio su cvd01
// var address = 'wss://cvd01:8334/ws'; // da dentro il lab per cvd01

// to use the previous settings, issue:
// $ ssh -L 8334:cvd01:8334 cvdlab@cvd.dia.uniroma3.it -N

// Initiate the websocket connection.  The btcd generated certificate acts as
// its own certificate authority, so it needs to be specified in the 'ca' array
// for the certificate to properly validate.
var ws = new WebSocket(address, {
  headers: {
    'Authorization': 'Basic '+new Buffer(user+':'+password).toString('base64')
  },
  cert: cert,
  ca: [cert]
});

/**
 * start
 */

function start (serial_experiments) {
  ws.on('open', function() {
    async.series(serial_experiments, function () {
      console.log('done!');
      process.exit(0);
    });
  });
}

/** 
 * handle 'message'
*/

ws.on('message', function(data, flags) {
  var parsed = JSON.parse(data);
  var id = parsed.id;
  callbacks[id].call(null, parsed.error, parsed.result);
});

ws.on('error', function(derp) {
  console.log('ERROR:' + derp);
});

ws.on('close', function(data) {
  console.log('DISCONNECTED');
});

var callbacks = {};

/**
 * getBlockHash
 */

function getBlockHash (height, cb) {
  var key = "getblockhash-" + Date.now();
  var param = {
    jsonrpc: "1.0",
    id: key,
    method: "getblockhash",
    params: [height]
  };

  function callback (err, res) {
    // handle possibly errors
    delete callbacks[key];
    setImmediate(cb, err, res);
  }

  callbacks[key] = callback;
  ws.send(JSON.stringify(param));
}

/**
 * getBlock
 */

function getBlock (block, cb) {
  var key = "getblock-" + Date.now();
  var param = {
    jsonrpc: "1.0",
    id: key,
    method: "getblock",
    params: [block, true, true]
  };

  function callback (err, res) {
    // handle possibly error
    delete callbacks[key];
    setImmediate(cb, err, res);
  }

  callbacks[key] = callback;
  ws.send(JSON.stringify(param));
}

/**
 * getRawTransaction
 */

function getRawTransaction (transactionHash, cb) {
  var key = "getrawtransaction-" + Date.now();
  var param = {
    jsonrpc: "1.0",
    id: key,
    method: "getrawtransaction",
    params: [transactionHash]
  };

  function callback (err, res) {
    // handle possibly error
    delete callbacks[key];
    setImmediate(cb, err, res);
  }

  callbacks[key] = callback;
  ws.send(JSON.stringify(param));
}

/**
 * decodeRawTransaction
 */

function decodeRawTransaction (rawTransaction, cb) {
  var key = "decoderawtransaction-" + Date.now();
  var param = {
    jsonrpc: "1.0",
    id: key,
    method: "getrawtransaction",
    params: [rawTransaction]
  };

  function callback (err, res) {
    // handle possibly error
    delete callbacks[key];
    setImmediate(cb, err, res);
  }

  callbacks[key] = callback;
  ws.send(JSON.stringify(param));
}

/**
 * Module exports
 */

var commands = {
  start: start,
  getBlockHash: getBlockHash,
  getBlock:getBlock,
  getRawTransaction: getRawTransaction,
  decodeRawTransaction: decodeRawTransaction
};

module.exports = function () {
  return commands;
};
